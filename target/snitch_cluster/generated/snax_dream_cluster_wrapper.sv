// Copyright 2021 ETH Zurich and University of Bologna.
// Solderpad Hardware License, Version 0.51, see LICENSE for details.
// SPDX-License-Identifier: SHL-0.51

// AUTOMATICALLY GENERATED by clustergen.py; edit the script or configuration
// instead.i









// These includes are necessary for pre-defined typedefs
`include "axi/typedef.svh"
`include "tcdm_interface/typedef.svh"

// Main cluster package
// verilog_lint: waive-start package-filename
package snax_dream_cluster_pkg;

  // Addressing Parameters
  localparam logic [ 9:0] HartBaseID = 10'h0;
  localparam logic [47:0] ClusterBaseAddr = 48'h10000000;
  localparam logic [31:0] BootAddr = 32'h1000;

  // Base and pre-calculated parameters
  localparam int unsigned NrCores = 2;
  localparam int unsigned NrHives = 1;

  localparam int unsigned AddrWidth = 48;
  localparam int unsigned NarrowDataWidth = 64;
  localparam int unsigned WideDataWidth = 512;

  localparam int unsigned NarrowIdWidthIn = 2;
  localparam int unsigned NrMasters = 3;
  localparam int unsigned NarrowIdWidthOut = $clog2(NrMasters) + NarrowIdWidthIn;

  localparam int unsigned NrDmaMasters = 2 + 1;
  localparam int unsigned WideIdWidthIn = 1;
  localparam int unsigned WideIdWidthOut = $clog2(NrDmaMasters) + WideIdWidthIn;

  localparam int unsigned CoreIDWidth = cf_math_pkg::idx_width(NrCores);

  localparam int unsigned TCDMDepth = 512;
  localparam int unsigned NrBanks = 32;

  localparam int unsigned NarrowUserWidth = 1;
  localparam int unsigned WideUserWidth = 1;

  localparam int unsigned ICacheLineWidth [NrHives] = '{
    256
};
  localparam int unsigned ICacheLineCount [NrHives] = '{
    128
};
  localparam int unsigned ICacheSets [NrHives] = '{
    2
};

  localparam int unsigned Hive [NrCores] = '{0, 0};

  // SRAM configurations
  typedef struct packed {
    logic [0:0] reserved;
  } sram_cfg_t;

  typedef struct packed {
    sram_cfg_t icache_tag;
    sram_cfg_t icache_data;
    sram_cfg_t tcdm;
  } sram_cfgs_t;

  // Re-defined typedefs used for other typedefs
  typedef logic [AddrWidth-1:0]         addr_t;
  typedef logic [NarrowDataWidth-1:0]   data_t;
  typedef logic [NarrowDataWidth/8-1:0] strb_t;
  typedef logic [WideDataWidth-1:0]     data_dma_t;
  typedef logic [WideDataWidth/8-1:0]   strb_dma_t;
  typedef logic [NarrowIdWidthIn-1:0]   narrow_in_id_t;
  typedef logic [NarrowIdWidthOut-1:0]  narrow_out_id_t;
  typedef logic [WideIdWidthIn-1:0]     wide_in_id_t;
  typedef logic [WideIdWidthOut-1:0]    wide_out_id_t;
  typedef logic [NarrowUserWidth-1:0]   user_t;
  typedef logic [WideUserWidth-1:0]     user_dma_t;

  // Typedefs for the AXI connections
  `AXI_TYPEDEF_ALL(narrow_in, addr_t, narrow_in_id_t, data_t, strb_t, user_t)
  `AXI_TYPEDEF_ALL(narrow_out, addr_t, narrow_out_id_t, data_t, strb_t, user_t)
  `AXI_TYPEDEF_ALL(wide_in, addr_t, wide_in_id_t, data_dma_t, strb_dma_t, user_dma_t)
  `AXI_TYPEDEF_ALL(wide_out, addr_t, wide_out_id_t, data_dma_t, strb_dma_t, user_dma_t)

  localparam int unsigned TCDMMemAddrWidth = $clog2(TCDMDepth);
  localparam int unsigned TCDMSize = NrBanks * TCDMDepth * (NarrowDataWidth/8);
  localparam int unsigned TCDMAddrWidth = $clog2(TCDMSize);
  typedef logic [TCDMAddrWidth-1:0] tcdm_addr_t;

  // TCDM definitions
  typedef struct packed {
    logic [CoreIDWidth-1:0] core_id;
    bit                     is_core;
  } tcdm_user_t;

  `TCDM_TYPEDEF_ALL(tcdm, tcdm_addr_t, data_t, strb_t, tcdm_user_t)

  // Accelerator definitions for SNAX and other Snitch L0 accelerators
  // (e.g., of L0 accelerators - DMA, FPSS, and so on)
  typedef struct packed {
    snitch_pkg::acc_addr_e   addr;
    logic [4:0]  id;
    logic [31:0] data_op;
    data_t       data_arga;
    data_t       data_argb;
    addr_t       data_argc;
  } acc_req_t;

  typedef struct packed {
    logic [4:0] id;
    logic       error;
    data_t      data;
  } acc_resp_t;

  // Function pre-calculations
  function automatic snitch_pma_pkg::rule_t [snitch_pma_pkg::NrMaxRules-1:0] get_cached_regions();
    automatic snitch_pma_pkg::rule_t [snitch_pma_pkg::NrMaxRules-1:0] cached_regions;
    cached_regions = '{default: '0};
    cached_regions[0] = '{base: 48'h80000000, mask: 48'hffff80000000};
    return cached_regions;
  endfunction

  localparam snitch_pma_pkg::snitch_pma_t SnitchPMACfg = '{
      NrCachedRegionRules: 1,
      CachedRegion: get_cached_regions(),
      default: 0
  };

  // FPU configurations per FPU that has a core
  localparam fpnew_pkg::fpu_implementation_t FPUImplementation [2] = '{
    '{
        PipeRegs: // FMA Block
                  '{
                    '{  3, // FP32
                        3, // FP64
                        2, // FP16
                        1, // FP8
                        2, // FP16alt
                        1  // FP8alt
                      },
                    '{1, 1, 1, 1, 1, 1},   // DIVSQRT
                    '{1,
                      1,
                      1,
                      1,
                      1,
                      1},   // NONCOMP
                    '{1,
                      1,
                      1,
                      1,
                      1,
                      1},   // CONV
                    '{2,
                      2,
                      2,
                      2,
                      2,
                      2}    // DOTP
                    },
        UnitTypes: '{'{fpnew_pkg::MERGED,
                       fpnew_pkg::MERGED,
                       fpnew_pkg::MERGED,
                       fpnew_pkg::MERGED,
                       fpnew_pkg::MERGED,
                       fpnew_pkg::MERGED},  // FMA
                    '{fpnew_pkg::DISABLED,
                        fpnew_pkg::DISABLED,
                        fpnew_pkg::DISABLED,
                        fpnew_pkg::DISABLED,
                        fpnew_pkg::DISABLED,
                        fpnew_pkg::DISABLED}, // DIVSQRT
                    '{fpnew_pkg::PARALLEL,
                        fpnew_pkg::PARALLEL,
                        fpnew_pkg::PARALLEL,
                        fpnew_pkg::PARALLEL,
                        fpnew_pkg::PARALLEL,
                        fpnew_pkg::PARALLEL}, // NONCOMP
                    '{fpnew_pkg::MERGED,
                        fpnew_pkg::MERGED,
                        fpnew_pkg::MERGED,
                        fpnew_pkg::MERGED,
                        fpnew_pkg::MERGED,
                        fpnew_pkg::MERGED},   // CONV
                    '{fpnew_pkg::DISABLED,
                        fpnew_pkg::DISABLED,
                        fpnew_pkg::DISABLED,
                        fpnew_pkg::DISABLED,
                        fpnew_pkg::DISABLED,
                        fpnew_pkg::DISABLED}}, // DOTP
        PipeConfig: fpnew_pkg::BEFORE
    },
    '{
        PipeRegs: // FMA Block
                  '{
                    '{  3, // FP32
                        3, // FP64
                        2, // FP16
                        1, // FP8
                        2, // FP16alt
                        1  // FP8alt
                      },
                    '{1, 1, 1, 1, 1, 1},   // DIVSQRT
                    '{1,
                      1,
                      1,
                      1,
                      1,
                      1},   // NONCOMP
                    '{1,
                      1,
                      1,
                      1,
                      1,
                      1},   // CONV
                    '{2,
                      2,
                      2,
                      2,
                      2,
                      2}    // DOTP
                    },
        UnitTypes: '{'{fpnew_pkg::MERGED,
                       fpnew_pkg::MERGED,
                       fpnew_pkg::MERGED,
                       fpnew_pkg::MERGED,
                       fpnew_pkg::MERGED,
                       fpnew_pkg::MERGED},  // FMA
                    '{fpnew_pkg::DISABLED,
                        fpnew_pkg::DISABLED,
                        fpnew_pkg::DISABLED,
                        fpnew_pkg::DISABLED,
                        fpnew_pkg::DISABLED,
                        fpnew_pkg::DISABLED}, // DIVSQRT
                    '{fpnew_pkg::PARALLEL,
                        fpnew_pkg::PARALLEL,
                        fpnew_pkg::PARALLEL,
                        fpnew_pkg::PARALLEL,
                        fpnew_pkg::PARALLEL,
                        fpnew_pkg::PARALLEL}, // NONCOMP
                    '{fpnew_pkg::MERGED,
                        fpnew_pkg::MERGED,
                        fpnew_pkg::MERGED,
                        fpnew_pkg::MERGED,
                        fpnew_pkg::MERGED,
                        fpnew_pkg::MERGED},   // CONV
                    '{fpnew_pkg::DISABLED,
                        fpnew_pkg::DISABLED,
                        fpnew_pkg::DISABLED,
                        fpnew_pkg::DISABLED,
                        fpnew_pkg::DISABLED,
                        fpnew_pkg::DISABLED}}, // DOTP
        PipeConfig: fpnew_pkg::BEFORE
    }
  };


endpackage
// verilog_lint: waive-stop package-filename

// Main snitch or SNAX cluster wrapper
module snax_dream_cluster_wrapper (
  //-----------------------------
  // Clock and reset
  //-----------------------------
  input  logic                                   clk_i,
  input  logic                                   rst_ni,
  //-----------------------------
  // Interrupt ports
  //-----------------------------
  input  logic [snax_dream_cluster_pkg::NrCores-1:0] debug_req_i,
  input  logic [snax_dream_cluster_pkg::NrCores-1:0] meip_i,
  input  logic [snax_dream_cluster_pkg::NrCores-1:0] mtip_i,
  input  logic [snax_dream_cluster_pkg::NrCores-1:0] msip_i,
  //-----------------------------
  // Cluster base addressing
  //-----------------------------
  input  logic [9:0]                             hart_base_id_i,
  input  logic [47:0]        cluster_base_addr_i,
  input  logic [31:0]                            boot_addr_i,
  //-----------------------------
  // Narrow AXI ports
  //-----------------------------
  input  snax_dream_cluster_pkg::narrow_in_req_t     narrow_in_req_i,
  output snax_dream_cluster_pkg::narrow_in_resp_t    narrow_in_resp_o,
  output snax_dream_cluster_pkg::narrow_out_req_t    narrow_out_req_o,
  input  snax_dream_cluster_pkg::narrow_out_resp_t   narrow_out_resp_i,
  //-----------------------------
  //Wide AXI ports
  //-----------------------------
  output snax_dream_cluster_pkg::wide_out_req_t      wide_out_req_o,
  input  snax_dream_cluster_pkg::wide_out_resp_t     wide_out_resp_i,
  input  snax_dream_cluster_pkg::wide_in_req_t       wide_in_req_i,
  output snax_dream_cluster_pkg::wide_in_resp_t      wide_in_resp_o
);

  // Internal local parameters to be hooked into the Snitch / SNAX cluster
  localparam int unsigned NumIntOutstandingLoads  [2] = '{1, 1};
  localparam int unsigned NumIntOutstandingMem    [2] = '{4, 4};
  localparam int unsigned NumFPOutstandingLoads   [2] = '{4, 4};
  localparam int unsigned NumFPOutstandingMem     [2] = '{4, 4};
  localparam int unsigned NumDTLBEntries          [2] = '{1, 1};
  localparam int unsigned NumITLBEntries          [2] = '{1, 1};
  localparam int unsigned NumSequencerInstr       [2] = '{16, 16};
  localparam int unsigned NumSsrs                 [2] = '{1, 1};
  localparam int unsigned SsrMuxRespDepth         [2] = '{4, 4};
  localparam int unsigned SnaxNarrowTcdmPorts     [2] = '{16, 0};
  localparam int unsigned SnaxWideTcdmPorts       [2] = '{0, 0};

  //-----------------------------
  // SNAX Custom Instruction Ports
  //-----------------------------
  // Request for custom instruction format
  snax_dream_cluster_pkg::acc_req_t [snax_dream_cluster_pkg::NrCores-1:0] snax_req;
  logic [snax_dream_cluster_pkg::NrCores-1:0] snax_qvalid;
  logic [snax_dream_cluster_pkg::NrCores-1:0] snax_qready;
  // Response for custom instruction format
  snax_dream_cluster_pkg::acc_resp_t [snax_dream_cluster_pkg::NrCores-1:0] snax_resp;
  logic [snax_dream_cluster_pkg::NrCores-1:0] snax_pvalid;
  logic [snax_dream_cluster_pkg::NrCores-1:0] snax_pready;

  //-----------------------------
  // SNAX CSR Ports
  //-----------------------------
  // Request for CSR format
  logic [snax_dream_cluster_pkg::NrCores-1:0][31:0] snax_csr_req_data;
  logic [snax_dream_cluster_pkg::NrCores-1:0][31:0] snax_csr_req_addr;
  logic [snax_dream_cluster_pkg::NrCores-1:0]       snax_csr_req_write;
  logic [snax_dream_cluster_pkg::NrCores-1:0]       snax_csr_req_valid;
  logic [snax_dream_cluster_pkg::NrCores-1:0]       snax_csr_req_ready;
  ///Response for CSR format
  logic [snax_dream_cluster_pkg::NrCores-1:0][31:0] snax_csr_rsp_data;
  logic [snax_dream_cluster_pkg::NrCores-1:0]       snax_csr_rsp_valid;
  logic [snax_dream_cluster_pkg::NrCores-1:0]       snax_csr_rsp_ready;
    
  //-----------------------------
  // SNAX TCDM wires
  //-----------------------------
  snax_dream_cluster_pkg::tcdm_req_t [15:0] snax_tcdm_req;
  snax_dream_cluster_pkg::tcdm_rsp_t [15:0] snax_tcdm_rsp;

  //-----------------------------
  // SNAX Barrier Wire
  //-----------------------------
  logic [snax_dream_cluster_pkg::NrCores-1:0] snax_barrier;

  // Snitch cluster under test.
  snitch_cluster #(
    .PhysicalAddrWidth (48),
    .NarrowDataWidth (64),
    .WideDataWidth (512),
    .NarrowIdWidthIn (snax_dream_cluster_pkg::NarrowIdWidthIn),
    .WideIdWidthIn (snax_dream_cluster_pkg::WideIdWidthIn),
    .NarrowUserWidth (snax_dream_cluster_pkg::NarrowUserWidth),
    .WideUserWidth (snax_dream_cluster_pkg::WideUserWidth),
    .narrow_in_req_t (snax_dream_cluster_pkg::narrow_in_req_t),
    .narrow_in_resp_t (snax_dream_cluster_pkg::narrow_in_resp_t),
    .narrow_out_req_t (snax_dream_cluster_pkg::narrow_out_req_t),
    .narrow_out_resp_t (snax_dream_cluster_pkg::narrow_out_resp_t),
    .wide_out_req_t (snax_dream_cluster_pkg::wide_out_req_t),
    .wide_out_resp_t (snax_dream_cluster_pkg::wide_out_resp_t),
    .wide_in_req_t (snax_dream_cluster_pkg::wide_in_req_t),
    .wide_in_resp_t (snax_dream_cluster_pkg::wide_in_resp_t),
    .NrHives (1),
    .NrCores (2),
    .TCDMDepth (snax_dream_cluster_pkg::TCDMDepth),
    .ZeroMemorySize (64),
    .ClusterPeriphSize (64),
    .NrBanks (snax_dream_cluster_pkg::NrBanks),
    .DMAAxiReqFifoDepth (3),
    .DMAReqFifoDepth (3),
    .ICacheLineWidth (snax_dream_cluster_pkg::ICacheLineWidth),
    .ICacheLineCount (snax_dream_cluster_pkg::ICacheLineCount),
    .ICacheSets (snax_dream_cluster_pkg::ICacheSets),
    .VMSupport (1),
    .RVE (2'b00),
    .RVF (2'b00),
    .RVD (2'b00),
    .XDivSqrt (2'b00),
    .XF16 (2'b00),
    .XF16ALT (2'b00),
    .XF8 (2'b00),
    .XF8ALT (2'b00),
    .XFVEC (2'b00),
    .XFDOTP (2'b00),
    .Xdma (2'b10),
    .Xssr (2'b00),
    .Xfrep (2'b00),
    .SnaxNarrowTcdmPorts (SnaxNarrowTcdmPorts),
    .SnaxWideTcdmPorts (SnaxWideTcdmPorts),
    .TotalSnaxNarrowTcdmPorts(16),
    .TotalSnaxWideTcdmPorts(0),
    .SnaxUseCustomPorts (2'b00),
    .FPUImplementation (snax_dream_cluster_pkg::FPUImplementation),
    .SnitchPMACfg (snax_dream_cluster_pkg::SnitchPMACfg),
    .NumIntOutstandingLoads (NumIntOutstandingLoads),
    .NumIntOutstandingMem (NumIntOutstandingMem),
    .NumFPOutstandingLoads (NumFPOutstandingLoads),
    .NumFPOutstandingMem (NumFPOutstandingMem),
    .NumDTLBEntries (NumDTLBEntries),
    .NumITLBEntries (NumITLBEntries),
    .NumSsrsMax (0),
    .NumSsrs (NumSsrs),
    .SsrMuxRespDepth (SsrMuxRespDepth),
    .NumSequencerInstr (NumSequencerInstr),
    .Hive (snax_dream_cluster_pkg::Hive),
    .Topology (snitch_pkg::LogarithmicInterconnect),
    .Radix (2),
    .RegisterOffloadReq (1),
    .RegisterOffloadRsp (1),
    .RegisterCoreReq (1),
    .RegisterCoreRsp (1),
    .RegisterTCDMCuts (0),
    .RegisterExtWide (0),
    .RegisterExtNarrow (0),
    .RegisterFPUReq (0),
    .RegisterFPUIn (0),
    .RegisterFPUOut (0),
    .RegisterSequencer (0),
    .IsoCrossing (0),
    .NarrowXbarLatency (axi_pkg::CUT_ALL_PORTS),
    .WideXbarLatency (axi_pkg::CUT_ALL_PORTS),
    .WideMaxMstTrans (4),
    .WideMaxSlvTrans (4),
    .NarrowMaxMstTrans (4),
    .NarrowMaxSlvTrans (4),
    .sram_cfg_t (snax_dream_cluster_pkg::sram_cfg_t),
    .sram_cfgs_t (snax_dream_cluster_pkg::sram_cfgs_t),
    .DebugSupport (1),
    .acc_req_t (snax_dream_cluster_pkg::acc_req_t),
    .acc_resp_t (snax_dream_cluster_pkg::acc_resp_t),
    .tcdm_req_t (snax_dream_cluster_pkg::tcdm_req_t),
    .tcdm_rsp_t (snax_dream_cluster_pkg::tcdm_rsp_t)
  ) i_cluster (
    //-----------------------------
    // Clock and reset
    //-----------------------------
    .clk_i  ( clk_i  ),
    .rst_ni ( rst_ni ),
    //-----------------------------
    // Interrupt ports
    //----------------------------
    .debug_req_i ( debug_req_i ),
    .meip_i ( meip_i ),
    .mtip_i ( mtip_i ),
    .msip_i ( msip_i ),
    //-----------------------------
    // Cluster base and boot addressing
    //-----------------------------
    .hart_base_id_i ( hart_base_id_i ),
    .cluster_base_addr_i ( cluster_base_addr_i ),
    .boot_addr_i  (boot_addr_i),
    //-----------------------------
    // ISO crossings
    //-----------------------------
    .clk_d2_bypass_i ( 1'b0 ),
    //-----------------------------
    // SNAX Custom Instruction Ports
    //-----------------------------
    // Request custom instruction format ports
    .snax_req_o    ( snax_req    ),
    .snax_qvalid_o ( snax_qvalid ),
    .snax_qready_i ( snax_qready ),
    // Response custom instruction format ports
    .snax_resp_i   ( snax_resp   ),
    .snax_pvalid_i ( snax_pvalid ),
    .snax_pready_o ( snax_pready ),
    //-----------------------------
    // SNAX CSR Ports
    //-----------------------------
    // Request for CSR format ports
    .snax_csr_req_bits_data_o   ( snax_csr_req_data  ),
    .snax_csr_req_bits_addr_o   ( snax_csr_req_addr  ),
    .snax_csr_req_bits_write_o  ( snax_csr_req_write ),
    .snax_csr_req_valid_o       ( snax_csr_req_valid ),
    .snax_csr_req_ready_i       ( snax_csr_req_ready ),
    // Response for CSR format ports
    .snax_csr_rsp_bits_data_i   ( snax_csr_rsp_data  ),
    .snax_csr_rsp_valid_i       ( snax_csr_rsp_valid ),
    .snax_csr_rsp_ready_o       ( snax_csr_rsp_ready ),

    //-----------------------------
    // SNAX TCDM wires
    //-----------------------------
    .snax_tcdm_req_i ( snax_tcdm_req),
    .snax_tcdm_rsp_o ( snax_tcdm_rsp),
    //-----------------------------
    // SNAX Barrier Wire
    //-----------------------------
    .snax_barrier_i  (snax_barrier),
    .sram_cfgs_i (snax_dream_cluster_pkg::sram_cfgs_t'('0)),
    //-----------------------------
    // Narrow AXI ports
    //-----------------------------
    .narrow_in_req_i    ( narrow_in_req_i   ),
    .narrow_in_resp_o   ( narrow_in_resp_o  ),
    .narrow_out_req_o   ( narrow_out_req_o  ),
    .narrow_out_resp_i  ( narrow_out_resp_i ),
    //-----------------------------
    // Wide AXI ports
    //-----------------------------
    .wide_out_req_o     ( wide_out_req_o    ),
    .wide_out_resp_i    ( wide_out_resp_i   ),
    .wide_in_req_i      ( wide_in_req_i     ),
    .wide_in_resp_o     ( wide_in_resp_o    )
  );

  // ------------------------- Accelerator Set for Core 0 -------------------------
  // This is an accelerator set controlled by 1 Snitch core

  // Accelerators controlled with custom instruction format ports
  snax_dream_wrapper # (
    .DataWidth        ( snax_dream_cluster_pkg::NarrowDataWidth ),
    .SnaxTcdmPorts    ( 16 ),
    .tcdm_req_t       ( snax_dream_cluster_pkg::tcdm_req_t ),
    .tcdm_rsp_t       ( snax_dream_cluster_pkg::tcdm_rsp_t )
  ) i_snax_core_0_acc_0_snax_dream  (
    //-----------------------------
    // Clock and reset
    //-----------------------------
    .clk_i            ( clk_i  ),
    .rst_ni           ( rst_ni ),
    //-----------------------------
    // CSR  format control ports
    //-----------------------------
    // Request
    .snax_req_data_i  ( snax_csr_req_data [0] ),
    .snax_req_addr_i  ( snax_csr_req_addr [0] ),
    .snax_req_write_i ( snax_csr_req_write[0] ),
    .snax_req_valid_i ( snax_csr_req_valid[0] ),
    .snax_req_ready_o ( snax_csr_req_ready[0] ),
    // Response
    .snax_rsp_data_o  ( snax_csr_rsp_data [0] ),
    .snax_rsp_valid_o ( snax_csr_rsp_valid[0] ),
    .snax_rsp_ready_i ( snax_csr_rsp_ready[0] ),
    //-----------------------------
    // Hardware barrier
    //-----------------------------
    .snax_barrier_o   ( snax_barrier[0] ),
    //-----------------------------
    // TCDM ports
    //-----------------------------
    .snax_tcdm_req_o  ( snax_tcdm_req[15:0] ),
    .snax_tcdm_rsp_i  ( snax_tcdm_rsp[15:0] )
  );

  // Tie unused custom instruction ports to 0
  assign snax_qready  [0] = '0;
  assign snax_resp    [0] = '0;
  assign snax_pvalid  [0] = '0;

  
  // ------------------------- Accelerator Set for Core 1 -------------------------
  // This is an accelerator set controlled by 1 Snitch core
  
  // If no accelerator is connected to Snitch core
  // Tie SNAX custom ports to 0
  assign snax_qready  [1] = '0;
  assign snax_resp    [1] = '0;
  assign snax_pvalid  [1] = '0;
  // Tie CSR ports to 0
  assign snax_csr_rsp_data [ 1] = '0;
  assign snax_csr_rsp_valid [1] = '0;
  assign snax_csr_req_ready [1] = '0;
  // Tie barrier to 0
  assign snax_barrier [1] = '0;


endmodule
