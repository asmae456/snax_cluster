// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for prints and assertions.

// Users can define 'ASSERT_VERBOSE_COND' to add an extra gate to assert error printing.
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

`ifndef ASSERT_VERBOSE_COND_
  `ifdef ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ (`ASSERT_VERBOSE_COND)
  `else  // ASSERT_VERBOSE_COND
    `define ASSERT_VERBOSE_COND_ 1
  `endif // ASSERT_VERBOSE_COND
`endif // not def ASSERT_VERBOSE_COND_

// Users can define 'STOP_COND' to add an extra gate to stop conditions.
`ifndef STOP_COND_
  `ifdef STOP_COND
    `define STOP_COND_ (`STOP_COND)
  `else  // STOP_COND
    `define STOP_COND_ 1
  `endif // STOP_COND
`endif // not def STOP_COND_

module snax_dream_csrman_CsrManager(	// src/main/scala/snax/csr_manager/CsrManager.scala:57:7
  input         clock,	// src/main/scala/snax/csr_manager/CsrManager.scala:57:7
                reset,	// src/main/scala/snax/csr_manager/CsrManager.scala:57:7
  output        io_csr_config_in_req_ready,	// src/main/scala/snax/csr_manager/CsrManager.scala:66:19
  input         io_csr_config_in_req_valid,	// src/main/scala/snax/csr_manager/CsrManager.scala:66:19
  input  [31:0] io_csr_config_in_req_bits_data,	// src/main/scala/snax/csr_manager/CsrManager.scala:66:19
                io_csr_config_in_req_bits_addr,	// src/main/scala/snax/csr_manager/CsrManager.scala:66:19
  input         io_csr_config_in_req_bits_write,	// src/main/scala/snax/csr_manager/CsrManager.scala:66:19
                io_csr_config_in_rsp_ready,	// src/main/scala/snax/csr_manager/CsrManager.scala:66:19
  output        io_csr_config_in_rsp_valid,	// src/main/scala/snax/csr_manager/CsrManager.scala:66:19
  output [31:0] io_csr_config_in_rsp_bits_data,	// src/main/scala/snax/csr_manager/CsrManager.scala:66:19
  input         io_csr_config_out_ready,	// src/main/scala/snax/csr_manager/CsrManager.scala:66:19
  output        io_csr_config_out_valid,	// src/main/scala/snax/csr_manager/CsrManager.scala:66:19
  output [31:0] io_csr_config_out_bits_0,	// src/main/scala/snax/csr_manager/CsrManager.scala:66:19
                io_csr_config_out_bits_1,	// src/main/scala/snax/csr_manager/CsrManager.scala:66:19
                io_csr_config_out_bits_2,	// src/main/scala/snax/csr_manager/CsrManager.scala:66:19
  input  [31:0] io_read_only_csr_0,	// src/main/scala/snax/csr_manager/CsrManager.scala:66:19
                io_read_only_csr_1	// src/main/scala/snax/csr_manager/CsrManager.scala:66:19
);

  wire             io_csr_config_in_req_ready_0;	// src/main/scala/snax/csr_manager/CsrManager.scala:151:23, :152:32, :153:25
  reg  [31:0]      csr_0;	// src/main/scala/snax/csr_manager/CsrManager.scala:72:20
  reg  [31:0]      csr_1;	// src/main/scala/snax/csr_manager/CsrManager.scala:72:20
  reg  [31:0]      csr_2;	// src/main/scala/snax/csr_manager/CsrManager.scala:72:20
  wire             _write_csr_T =
    io_csr_config_in_req_ready_0 & io_csr_config_in_req_valid;	// src/main/scala/chisel3/util/Decoupled.scala:51:35, src/main/scala/snax/csr_manager/CsrManager.scala:151:23, :152:32, :153:25
  wire             read_csr = _write_csr_T & ~io_csr_config_in_req_bits_write;	// src/main/scala/chisel3/util/Decoupled.scala:51:35, src/main/scala/snax/csr_manager/CsrManager.scala:75:{44,47}
  wire             write_csr = _write_csr_T & io_csr_config_in_req_bits_write;	// src/main/scala/chisel3/util/Decoupled.scala:51:35, src/main/scala/snax/csr_manager/CsrManager.scala:76:45
  wire             _check_acc_status_T =
    io_csr_config_in_req_valid & io_csr_config_in_req_bits_write;	// src/main/scala/snax/csr_manager/CsrManager.scala:78:32
  wire             _io_csr_config_out_valid_T = io_csr_config_in_req_bits_addr == 32'h2;	// src/main/scala/snax/csr_manager/CsrManager.scala:79:39
  wire             _io_csr_config_out_valid_T_2 = io_csr_config_in_req_bits_data == 32'h1;	// src/main/scala/snax/csr_manager/CsrManager.scala:79:102
  wire             _GEN = io_csr_config_in_req_bits_addr < 32'h3;	// src/main/scala/snax/csr_manager/CsrManager.scala:89:42
  `ifndef SYNTHESIS	// src/main/scala/snax/csr_manager/CsrManager.scala:88:15
    always @(posedge clock) begin	// src/main/scala/snax/csr_manager/CsrManager.scala:88:15
      if (io_csr_config_in_req_valid & io_csr_config_in_req_bits_write & ~reset
          & ~_GEN) begin	// src/main/scala/snax/csr_manager/CsrManager.scala:88:15, :89:42
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/snax/csr_manager/CsrManager.scala:88:15
          $error("Assertion failed: csr write address overflow!\n    at CsrManager.scala:88 assert(\n");	// src/main/scala/snax/csr_manager/CsrManager.scala:88:15
        if (`STOP_COND_)	// src/main/scala/snax/csr_manager/CsrManager.scala:88:15
          $fatal;	// src/main/scala/snax/csr_manager/CsrManager.scala:88:15
      end
      if (io_csr_config_in_req_valid & ~io_csr_config_in_req_bits_write & ~reset
          & io_csr_config_in_req_bits_addr > 32'h4) begin	// src/main/scala/snax/csr_manager/CsrManager.scala:75:47, :88:15, :97:15, :98:42
        if (`ASSERT_VERBOSE_COND_)	// src/main/scala/snax/csr_manager/CsrManager.scala:97:15
          $error("Assertion failed: csr read address overflow!\n    at CsrManager.scala:97 assert(\n");	// src/main/scala/snax/csr_manager/CsrManager.scala:97:15
        if (`STOP_COND_)	// src/main/scala/snax/csr_manager/CsrManager.scala:97:15
          $fatal;	// src/main/scala/snax/csr_manager/CsrManager.scala:97:15
      end
    end // always @(posedge)
  `endif // not def SYNTHESIS
  reg              read_csr_busy;	// src/main/scala/snax/csr_manager/CsrManager.scala:116:30
  reg  [31:0]      read_csr_buffer;	// src/main/scala/snax/csr_manager/CsrManager.scala:120:32
  wire [3:0][31:0] _GEN_0 = {{csr_0}, {csr_2}, {csr_1}, {csr_0}};	// src/main/scala/snax/csr_manager/CsrManager.scala:72:20, :125:38
  wire [31:0]      _GEN_1 =
    _GEN
      ? _GEN_0[io_csr_config_in_req_bits_addr[1:0]]
      : io_csr_config_in_req_bits_addr[0] - 1'h1
          ? io_read_only_csr_1
          : io_read_only_csr_0;	// <stdin>:68:50, src/main/scala/snax/csr_manager/CsrManager.scala:89:42, :124:62, :125:38, :128:38, :129:40
  wire             io_csr_config_in_rsp_valid_0 = read_csr | read_csr_busy;	// src/main/scala/snax/csr_manager/CsrManager.scala:75:44, :116:30, :123:18, :132:32, :133:29
  assign io_csr_config_in_req_ready_0 =
    ~read_csr_busy
    & (~(_check_acc_status_T & _io_csr_config_out_valid_T & _io_csr_config_out_valid_T_2
         | _check_acc_status_T & _io_csr_config_out_valid_T
         & io_csr_config_in_req_bits_data == 32'h0) | io_csr_config_out_ready);	// src/main/scala/snax/csr_manager/CsrManager.scala:72:28, :78:32, :79:{39,68,102}, :82:{68,102}, :116:30, :151:23, :152:32, :153:25, :154:32, :155:32, :156:32, :158:32
  always @(posedge clock or posedge reset) begin	// src/main/scala/snax/csr_manager/CsrManager.scala:57:7
    if (reset) begin	// src/main/scala/snax/csr_manager/CsrManager.scala:57:7
      csr_0 <= 32'h0;	// src/main/scala/snax/csr_manager/CsrManager.scala:72:{20,28}
      csr_1 <= 32'h0;	// src/main/scala/snax/csr_manager/CsrManager.scala:72:{20,28}
      csr_2 <= 32'h0;	// src/main/scala/snax/csr_manager/CsrManager.scala:72:{20,28}
      read_csr_busy <= 1'h0;	// src/main/scala/snax/csr_manager/CsrManager.scala:75:47, :116:30
      read_csr_buffer <= 32'h0;	// src/main/scala/snax/csr_manager/CsrManager.scala:72:28, :120:32
    end
    else begin	// src/main/scala/snax/csr_manager/CsrManager.scala:57:7
      if (write_csr & io_csr_config_in_req_bits_addr[1:0] == 2'h0)	// <stdin>:57:20, src/main/scala/snax/csr_manager/CsrManager.scala:72:20, :76:45, :108:19, :109:41
        csr_0 <= io_csr_config_in_req_bits_data;	// src/main/scala/snax/csr_manager/CsrManager.scala:72:20
      if (write_csr & io_csr_config_in_req_bits_addr[1:0] == 2'h1)	// <stdin>:57:20, src/main/scala/snax/csr_manager/CsrManager.scala:72:20, :76:45, :108:19, :109:41
        csr_1 <= io_csr_config_in_req_bits_data;	// src/main/scala/snax/csr_manager/CsrManager.scala:72:20
      if (write_csr & io_csr_config_in_req_bits_addr[1:0] == 2'h2)	// <stdin>:57:20, src/main/scala/snax/csr_manager/CsrManager.scala:72:20, :76:45, :79:39, :108:19, :109:41
        csr_2 <= io_csr_config_in_req_bits_data;	// src/main/scala/snax/csr_manager/CsrManager.scala:72:20
      read_csr_busy <= io_csr_config_in_rsp_valid_0 & ~io_csr_config_in_rsp_ready;	// src/main/scala/snax/csr_manager/CsrManager.scala:116:30, :117:{47,50}, :123:18, :132:32, :133:29
      if (read_csr)	// src/main/scala/snax/csr_manager/CsrManager.scala:75:44
        read_csr_buffer <= _GEN_1;	// src/main/scala/snax/csr_manager/CsrManager.scala:120:32, :124:62, :125:38, :128:38
      else if (read_csr_busy) begin	// src/main/scala/snax/csr_manager/CsrManager.scala:116:30
      end
      else	// src/main/scala/snax/csr_manager/CsrManager.scala:116:30
        read_csr_buffer <= 32'h0;	// src/main/scala/snax/csr_manager/CsrManager.scala:72:28, :120:32
    end
  end // always @(posedge, posedge)
  `ifdef ENABLE_INITIAL_REG_	// src/main/scala/snax/csr_manager/CsrManager.scala:57:7
    `ifdef FIRRTL_BEFORE_INITIAL	// src/main/scala/snax/csr_manager/CsrManager.scala:57:7
      `FIRRTL_BEFORE_INITIAL	// src/main/scala/snax/csr_manager/CsrManager.scala:57:7
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// src/main/scala/snax/csr_manager/CsrManager.scala:57:7
      automatic logic [31:0] _RANDOM[0:4];	// src/main/scala/snax/csr_manager/CsrManager.scala:57:7
      `ifdef INIT_RANDOM_PROLOG_	// src/main/scala/snax/csr_manager/CsrManager.scala:57:7
        `INIT_RANDOM_PROLOG_	// src/main/scala/snax/csr_manager/CsrManager.scala:57:7
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// src/main/scala/snax/csr_manager/CsrManager.scala:57:7
        for (logic [2:0] i = 3'h0; i < 3'h5; i += 3'h1) begin
          _RANDOM[i] = `RANDOM;	// src/main/scala/snax/csr_manager/CsrManager.scala:57:7
        end	// src/main/scala/snax/csr_manager/CsrManager.scala:57:7
        csr_0 = _RANDOM[3'h0];	// src/main/scala/snax/csr_manager/CsrManager.scala:57:7, :72:20
        csr_1 = _RANDOM[3'h1];	// src/main/scala/snax/csr_manager/CsrManager.scala:57:7, :72:20
        csr_2 = _RANDOM[3'h2];	// src/main/scala/snax/csr_manager/CsrManager.scala:57:7, :72:20
        read_csr_busy = _RANDOM[3'h3][0];	// src/main/scala/snax/csr_manager/CsrManager.scala:57:7, :116:30
        read_csr_buffer = {_RANDOM[3'h3][31:1], _RANDOM[3'h4][0]};	// src/main/scala/snax/csr_manager/CsrManager.scala:57:7, :116:30, :120:32
      `endif // RANDOMIZE_REG_INIT
      if (reset) begin	// src/main/scala/snax/csr_manager/CsrManager.scala:57:7
        csr_0 = 32'h0;	// src/main/scala/snax/csr_manager/CsrManager.scala:72:{20,28}
        csr_1 = 32'h0;	// src/main/scala/snax/csr_manager/CsrManager.scala:72:{20,28}
        csr_2 = 32'h0;	// src/main/scala/snax/csr_manager/CsrManager.scala:72:{20,28}
        read_csr_busy = 1'h0;	// src/main/scala/snax/csr_manager/CsrManager.scala:75:47, :116:30
        read_csr_buffer = 32'h0;	// src/main/scala/snax/csr_manager/CsrManager.scala:72:28, :120:32
      end
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// src/main/scala/snax/csr_manager/CsrManager.scala:57:7
      `FIRRTL_AFTER_INITIAL	// src/main/scala/snax/csr_manager/CsrManager.scala:57:7
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_csr_config_in_req_ready = io_csr_config_in_req_ready_0;	// src/main/scala/snax/csr_manager/CsrManager.scala:57:7, :151:23, :152:32, :153:25
  assign io_csr_config_in_rsp_valid = io_csr_config_in_rsp_valid_0;	// src/main/scala/snax/csr_manager/CsrManager.scala:57:7, :123:18, :132:32, :133:29
  assign io_csr_config_in_rsp_bits_data =
    read_csr ? _GEN_1 : read_csr_busy ? read_csr_buffer : 32'h0;	// src/main/scala/snax/csr_manager/CsrManager.scala:57:7, :72:28, :75:44, :116:30, :120:32, :123:18, :124:62, :125:38, :128:38, :133:29, :134:36, :138:36
  assign io_csr_config_out_valid =
    write_csr & _io_csr_config_out_valid_T & _io_csr_config_out_valid_T_2;	// src/main/scala/snax/csr_manager/CsrManager.scala:57:7, :76:45, :79:{39,102}, :145:104
  assign io_csr_config_out_bits_0 = csr_0;	// src/main/scala/snax/csr_manager/CsrManager.scala:57:7, :72:20
  assign io_csr_config_out_bits_1 = csr_1;	// src/main/scala/snax/csr_manager/CsrManager.scala:57:7, :72:20
  assign io_csr_config_out_bits_2 = csr_2;	// src/main/scala/snax/csr_manager/CsrManager.scala:57:7, :72:20
endmodule

